import networkx as nx

def dij_shortest_path():
    with open("rosalind_dij.txt") as f:
        # Read the number of nodes and edges
        n, m = map(int, f.readline().strip().split())
        # Read the edge list with weights
        edge_list = [tuple(map(int, line.strip().split())) for line in f.readlines()]

    # Create a directed graph
    G = nx.DiGraph()
    G.add_nodes_from(range(1, n + 1))  # Add nodes
    G.add_weighted_edges_from(edge_list)  # Add weighted edges

    # Dictionary to store shortest path lengths from node 1
    shortest_paths = {}
    try:
        shortest_paths = nx.single_source_dijkstra_path_length(G, 1)
    except nx.NetworkXNoPath:
        pass  # Handle cases where nodes are not reachable

    # Create the result array
    result = [-1] * n
    for node, dist in shortest_paths.items():
        result[node - 1] = dist  # Adjust for 1-based indexing

    # Print the result as space-separated values
    print(" ".join(map(str, result)))

if __name__ == "__main__":
    dij_shortest_path()
