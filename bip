import networkx as nx

def bipartite_check():
    with open("rosalind_bip.txt") as f:
        lines = f.readlines()
        # Remove empty lines
        lines = [line.strip() for line in lines if line.strip()]

    # Number of test cases
    t = int(lines[0])
    index = 1  # Start reading from the second line
    results = []

    for _ in range(t):
        # Number of vertices and edges
        n, e = map(int, lines[index].split())
        index += 1  # Move to the edge list
        edge_list = [tuple(map(int, lines[index + i].split())) for i in range(e)]
        index += e  # Move past the edge list

        # Create the graph
        G = nx.Graph()
        G.add_nodes_from(range(1, n + 1))
        G.add_edges_from(edge_list)

        # Check if the graph is bipartite
        if nx.is_bipartite(G):
            results.append("1")
        else:
            results.append("-1")

    # Print results for all test cases
    print(" ".join(results))

if __name__ == "__main__":
    bipartite_check()
