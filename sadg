from collections import defaultdict, deque
import sys

def topological_sort(n, edges):
    indegree = [0] * n
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))
        indegree[v-1] += 1

    queue = deque([i for i in range(1, n + 1) if indegree[i-1] == 0])
    topo_order = []
    
    while queue:
        node = queue.popleft()
        topo_order.append(node)
        for neighbor, _ in graph[node]:
            indegree[neighbor-1] -= 1
            if indegree[neighbor-1] == 0:
                queue.append(neighbor)
    
    return topo_order

def shortest_path_dag(n, edges):
    topo_order = topological_sort(n, edges)
    dist = [sys.maxsize] * n
    dist[0] = 0  # Distance to source vertex (vertex 1)
    
    for u in topo_order:
        for v, weight in graph[u]:
            if dist[u-1] != sys.maxsize and dist[u-1] + weight < dist[v-1]:
                dist[v-1] = dist[u-1] + weight
    
    return ["x" if d == sys.maxsize else d for d in dist]

# Sample input
n = 5
edges = [(2, 3, 4), (4, 3, -2), (1, 4, 1), (1, 5, -3), (2, 4, -2), (5, 4, 1)]
result = shortest_path_dag(n, edges)
print(result)
