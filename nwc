def bellman_ford(n, edges):
    dist = [float('inf')] * n
    dist[0] = 0  # Assuming the source vertex is 1 (0-based index)
    
    # Relax all edges |V|-1 times
    for _ in range(n - 1):
        for u, v, w in edges:
            if dist[u - 1] != float('inf') and dist[u - 1] + w < dist[v - 1]:
                dist[v - 1] = dist[u - 1] + w
    
    # Check for negative weight cycles
    for u, v, w in edges:
        if dist[u - 1] != float('inf') and dist[u - 1] + w < dist[v - 1]:
            return 1  # Negative weight cycle detected
    
    return -1  # No negative weight cycle

def process_graphs(k, graphs):
    results = []
    for graph in graphs:
        n, edges = graph
        result = bellman_ford(n, edges)
        results.append(result)
    return results

# Sample Input
k = 2
graphs = [
    (4, [(1, 4, 4), (4, 2, 3), (2, 3, 1), (3, 1, 6), (2, 1, -7)]),
    (3, [(1, 2, -8), (2, 3, 20), (3, 1, -1), (3, 2, -30)])
]

# Process each graph
results = process_graphs(k, graphs)
print(results)
